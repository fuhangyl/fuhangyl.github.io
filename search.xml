<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>对象数组去重</title>
    <url>/object-array-deduplication/</url>
    <content><![CDATA[<p>平时我们在做项目时，经常会遇到去重操作，那么当我们遇到一个对象数组时，如何去重呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;fuhang&#x27;</span>, <span class="attr">age</span>: <span class="number">23</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;fuhang&#x27;</span>, <span class="attr">age</span>: <span class="number">23</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hash = &#123;&#125;</span><br><span class="line"></span><br><span class="line">list = list.<span class="title function_">reduce</span>(<span class="function">(<span class="params">item, next</span>) =&gt;</span> &#123;</span><br><span class="line">  hash[next.<span class="property">name</span>] ? <span class="string">&#x27;&#x27;</span> : hash[next.<span class="property">name</span>] = <span class="literal">true</span> &amp;&amp; item.<span class="title function_">push</span>(next);</span><br><span class="line">  <span class="keyword">return</span> item;</span><br><span class="line">&#125;, [])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list)</span><br><span class="line"><span class="comment">// [ &#123; name: &#x27;fuhang&#x27;, age: 23 &#125;, &#123; name: &#x27;tom&#x27;, age: 18 &#125; ]</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<ol>
<li>reduce()方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。关于reduce的详细用法可参考MDN</li>
<li>主要利用了一个空的hash对象来判断，是否已经有同属性的对象，如果有则不执行任何操作，如果没有，则push到存储的对象中去。</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>map、parseInt组合考点</title>
    <url>/map-parseInt/</url>
    <content><![CDATA[<p>[‘1’, ‘2’, ‘3’].map(parseInt) what &amp; why ? 这题主要主要考了两个知识点：</p>
<h4 id="1-Array-map"><a href="#1-Array-map" class="headerlink" title="1. Array.map()"></a>1. Array.map()</h4><p>map方法会接受一个callback函数，callback 函数会被自动传入三个参数：</p>
<ul>
<li>currentValue：callback 数组中正在处理的当前元素</li>
<li>index(可选)：callback 数组中正在处理的当前元素的索引</li>
<li>thisArg(可选)：执行 callback 函数时使用的 this 值</li>
</ul>
<p>map方法最后返回一个经过callback计算后的数组，并且不会修改原数组。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map">参考：map | MDN</a></p>
<h4 id="2-parseInt"><a href="#2-parseInt" class="headerlink" title="2. parseInt()"></a>2. parseInt()</h4><p>parseInt方法接受两个参数：</p>
<ul>
<li>string：要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用  toString 抽象操作)。字符串开头的空白符将会被忽略。</li>
<li>radix：一个介于2和36之间的整数(数学系统的基础)，表示上述字符串的基数。比如参数”10”表示使用我们通常使用的十进制数值系统。不同的基数会产生不同的结果，当未指定基数或基数为0时，则数字将以 10 为基础来解析。</li>
</ul>
<p><strong>注意：</strong> radix参数为n 将会把第一个参数看作是一个数的n进制表示，而返回的值则是十进制的。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将&#x27;123&#x27;看作5进制数，返回十进制数38 =&gt; 1*5^2 + 2*5^1 + 3*5^0 = 38</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;123&#x27;</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt">参考：parseInt | MDN</a></p>
<p>所以上题其实就是等价于：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;1&#x27;</span>, <span class="number">0</span>)   <span class="comment">// 1       基数为0时，已十进制解析</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;2&#x27;</span>, <span class="number">1</span>)   <span class="comment">// NaN     radi是介于2~36之间的数</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;3&#x27;</span>, <span class="number">2</span>)   <span class="comment">// NaN     2进制数中不会出现3</span></span><br></pre></td></tr></table></figure>

<p>还可以看看下面这一题：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[ <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;10&#x27;</span> ].<span class="title function_">map</span>(<span class="built_in">parseInt</span>)</span><br></pre></td></tr></table></figure>

<p>其实答案已经很明显了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>, <span class="number">0</span>)     <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>, <span class="number">1</span>)     <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>, <span class="number">2</span>)     <span class="comment">// 2         1*2^1 + 0*2^0</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>, <span class="number">3</span>)     <span class="comment">// 3         1*3^1 + 0*3^0</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>, <span class="number">4</span>)     <span class="comment">// 4         1*4^1 + 0*4^0</span></span><br></pre></td></tr></table></figure>

<p>有的时候我们还需要注意进制数的规则，比如下面的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;3&#x27;</span>, <span class="number">2</span>)   </span><br><span class="line"><span class="comment">// NaN   2进制数中是不允许出现大于等于2的数字的</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;5&#x27;</span>, <span class="number">4</span>)   </span><br><span class="line"><span class="comment">// NaN   4进制数中是不允许出现大于等于4的数字的</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;124&#x27;</span>, <span class="number">4</span>) </span><br><span class="line"><span class="comment">// 6  4进制数中不允许出现大于等于4的数字，所以&#x27;124&#x27;会被转换为&#x27;12&#x27;，然后&#x27;12&#x27;转换为四进制 1*4^1 + 2*4^0 = 6</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>CSS-文字穿透效果</title>
    <url>/text-penetration/</url>
    <content><![CDATA[<h4 id="1、实现效果"><a href="#1、实现效果" class="headerlink" title="1、实现效果"></a>1、实现效果</h4><p><img src="/../images/text_penetration/01.png" alt="CSS-文字穿透效果" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h4 id="2、实现原理"><a href="#2、实现原理" class="headerlink" title="2、实现原理"></a>2、实现原理</h4><p>html部分比较简单，只需要一个遮罩层的div容器，然后在容器内添加H1标签即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>学而不思则罔<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面我们来拆解一下效果实现的步骤：</p>
<ol>
<li>首先要将body的宽高设置为100%，然后将自己喜欢的图片设置为背景图；</li>
<li>接着将modal元素的宽高也设置为100%，并设置背景色，这里设置的值为rgba(0, 0, 0, 0.5)；</li>
<li>然后将H1标签的宽高也设置为100%，因为后面要给H1标签添加背景图，同时设置文字水平垂直居中；</li>
<li>最后我们就要设置文字的穿透效果了，具体实现，代码中会具体标注；</li>
</ol>
<h4 id="3、实现源码"><a href="#3、实现源码" class="headerlink" title="3、实现源码"></a>3、实现源码</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">%container &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">%bgImage &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;背景图片路径&#x27;</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %container;</span><br><span class="line">  <span class="keyword">@extend</span> %bgImage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.modal</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %container;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %container;</span><br><span class="line">  <span class="keyword">@extend</span> %bgImage;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12vw</span>;</span><br><span class="line">  <span class="comment">// 设置描边</span></span><br><span class="line">  text-stroke: <span class="number">1px</span> <span class="number">#fff</span>;</span><br><span class="line">  <span class="comment">// 背景被裁剪成文字的前景色</span></span><br><span class="line">  <span class="attribute">background-clip</span>: text;</span><br><span class="line">  <span class="comment">// 设置文字透明</span></span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://codepen.io/fuhangyl/pen/WNWGxvx">效果传送门</a></p>
<h4 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h4><p>该效果实现主要应用了<strong>background-clip</strong>设置元素的背景图裁剪方式，具体实现可以参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-clip">MDN</a>文档。</p>
]]></content>
      <categories>
        <category>特效</category>
      </categories>
  </entry>
  <entry>
    <title>SASS Maps函数</title>
    <url>/sass-maps/</url>
    <content><![CDATA[<h4 id="1、Maps数据类型"><a href="#1、Maps数据类型" class="headerlink" title="1、Maps数据类型"></a>1、Maps数据类型</h4><p>了解SASS中的Maps函数之前，我们首先要学习SASS中的Maps数据类型。</p>
<p>SASS Maps是一种类似于JavaScript对象的数据类型，它允许我们存储和操作键值对。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$map</span>: (</span><br><span class="line">  key1: value1, </span><br><span class="line">  key2: value2</span><br><span class="line">)</span><br><span class="line">// Maps也是可以嵌套的</span><br><span class="line"><span class="variable">$map1</span>: (</span><br><span class="line">  key1: value1,</span><br><span class="line">  key2: (</span><br><span class="line">    key2_1: value2_1,</span><br><span class="line">    key2_2: value2_2      </span><br><span class="line">  ),</span><br><span class="line">  key3: value3      </span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Maps的嵌套在平时的开发中实用性还是比较高的，比如平时做后台管理系统时，会经常涉及到换肤功能：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$theme</span>: (</span><br><span class="line">  // 默认主题</span><br><span class="line">  default: (</span><br><span class="line">    <span class="comment">/* styles */</span></span><br><span class="line">  ),</span><br><span class="line">  // 暗黑主题</span><br><span class="line">  dark: (</span><br><span class="line">    <span class="comment">/* styles */</span></span><br><span class="line">  )      </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>为了使Maps数据类型更加灵活，SASS还提供了Maps函数，允许我们动态地创建、修改和操作Maps。在SASS中Maps自身带了七个函数：</p>
<ol>
<li><strong>map-get($map,$key)</strong> ：根据给定的key值，返回Maps中相关的值</li>
<li><strong>map-merge($map1,$map2)</strong> ：将两个Maps合并成一个新的Maps</li>
<li><strong>map-remove($map,$key)</strong> ：从Maps中删除一个key，返回一个新Maps</li>
<li><strong>map-keys($map)</strong> ：返回Maps中所有的key</li>
<li><strong>map-values($map)</strong> ：返回Maps中所有的value</li>
<li><strong>map-has-key($map,$key)</strong> ：根据给定的key值判断Maps是否有对应的value值，如果有返回true，否则返回false</li>
<li><strong>keywords($args)</strong> ：返回一个函数的参数，这个参数可以动态的设置key和value</li>
</ol>
<h4 id="2、map-get-map-key-函数"><a href="#2、map-get-map-key-函数" class="headerlink" title="2、map-get($map,$key)函数"></a>2、map-get($map,$key)函数</h4><p>map-get函数可以根据给定的$key的值，返回$map中对应的value值，如果$map中没有对应的$key，则返回null。函数包含两个参数：</p>
<ul>
<li>$map:  定义的Maps数据</li>
<li>$key:  需要遍历的key值</li>
</ul>
<p>下面我们来看看map-get函数的用法：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$fonts</span>: (</span><br><span class="line">  default: <span class="number">16px</span>,</span><br><span class="line">  small: <span class="number">14px</span>,</span><br><span class="line">  large: <span class="number">18px</span>      </span><br><span class="line">)</span><br><span class="line">.font-default &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">map-get</span>(<span class="variable">$fonts</span>, default);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-small</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">map-get</span>(<span class="variable">$fonts</span>, small);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-large</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">map-get</span>(<span class="variable">$fonts</span>, large);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// $fonts中并没有custom对应的value值，最后会返回null</span></span><br><span class="line"><span class="selector-class">.font-custom</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">map-get</span>(<span class="variable">$fonts</span>, custom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译后的CSS代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.font-default</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-small</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-large</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从编译后的css代码中可以发现，当$fonts中没有custom对应的value值时，会返回null，同时也不会编译在css代码中。</p>
<p><a href="https://fuhangyl.github.io/sass-media">map-get案例传送门</a></p>
<h4 id="3、map-merge-map1-map2-函数"><a href="#3、map-merge-map1-map2-函数" class="headerlink" title="3、map-merge($map1,$map2)函数"></a>3、map-merge($map1,$map2)函数</h4><p>map-merge函数可以将两个Maps合并成一个新的Maps，如果两个Maps中有相同的key，则后面的会覆盖前面的。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$map1</span>: (</span><br><span class="line">  color: red,</span><br><span class="line">  font-size: <span class="number">24px</span>,</span><br><span class="line">  background: <span class="number">#ffffff</span>      </span><br><span class="line">)</span><br><span class="line"><span class="variable">$map2</span>: (</span><br><span class="line">  line-height: <span class="number">1.5</span>, </span><br><span class="line">  font-weight: bold,</span><br><span class="line">  background: <span class="number">#000000</span>      </span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>如果我们想将$map1和$map2合并成一个新的Maps，可以使用map-merge函数：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$map3</span>: <span class="built_in">map-merge</span>(<span class="variable">$map1</span>, <span class="variable">$map2</span>)</span><br></pre></td></tr></table></figure>
<p>我们将得到一个新的Maps：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$map3</span>: (</span><br><span class="line">  color: red,</span><br><span class="line">  font-size: <span class="number">24px</span>,</span><br><span class="line">  // 后面的<span class="built_in">Maps</span>(<span class="variable">$map2</span>)会覆盖前面的<span class="built_in">Maps</span>(<span class="variable">$map1</span>)    </span><br><span class="line">  background: <span class="number">#000000</span>,</span><br><span class="line">  line-height: <span class="number">1.5</span>,</span><br><span class="line">  font-weight: bold,      </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="4、map-remove-map-key-函数"><a href="#4、map-remove-map-key-函数" class="headerlink" title="4、map-remove($map,$key)函数"></a>4、map-remove($map,$key)函数</h4>]]></content>
      <categories>
        <category>SASS</category>
      </categories>
  </entry>
  <entry>
    <title>SASS循环控制指令</title>
    <url>/sass-loop/</url>
    <content><![CDATA[<p>SASS中提供了三种循环控制指令：</p>
<ol>
<li>@for</li>
<li>@while</li>
<li>@each</li>
</ol>
<h4 id="1、-for循环指令"><a href="#1、-for循环指令" class="headerlink" title="1、@for循环指令"></a>1、@for循环指令</h4><p>@for循环指令提供了2种方式：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from &lt;start&gt; through &lt;end&gt;</span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from &lt;start&gt; to &lt;end&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>$i: 循环变量</li>
<li>start: 循环起始值 </li>
<li>end: 循环结束值</li>
</ul>
<p>上面两种方式的区别是，关键字 through 表示<strong>包括</strong> end 这个值，而 to 则<strong>不包括</strong> end 这个值，看看下面这个例子：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// through 方式</span></span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">3</span> &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span> * <span class="variable">$i</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// to 方式</span></span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> to <span class="number">3</span> &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span> * <span class="variable">$i</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的css样式代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* through 方式 */</span></span><br><span class="line"><span class="selector-class">.item-1</span> &#123; <span class="attribute">width</span>: <span class="number">100px</span>; &#125;</span><br><span class="line"><span class="selector-class">.item-2</span> &#123; <span class="attribute">width</span>: <span class="number">200px</span>; &#125;</span><br><span class="line"><span class="selector-class">.item-3</span> &#123; <span class="attribute">width</span>: <span class="number">300px</span>; &#125;</span><br><span class="line"><span class="comment">/* to 方式 */</span></span><br><span class="line"><span class="selector-class">.item-1</span> &#123; <span class="attribute">width</span>: <span class="number">100px</span>; &#125;</span><br><span class="line"><span class="selector-class">.item-2</span> &#123; <span class="attribute">width</span>: <span class="number">200px</span>; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、-while循环指令"><a href="#2、-while循环指令" class="headerlink" title="2、@while循环指令"></a>2、@while循环指令</h4><p>@while指令，只要后面的条件为true，则一直执行循环体，只到条件为false时，停止循环。</p>
<p>下面是@while指令的一个简单的应用：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$i</span>: <span class="number">4</span>;</span><br><span class="line"><span class="keyword">@while</span> <span class="variable">$i</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span> * <span class="variable">$i</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$i</span>: <span class="variable">$i</span> - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的css样式代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123; <span class="attribute">width</span>: <span class="number">400px</span>; &#125;</span><br><span class="line"><span class="selector-class">.item-2</span> &#123; <span class="attribute">width</span>: <span class="number">300px</span>; &#125;</span><br><span class="line"><span class="selector-class">.item-3</span> &#123; <span class="attribute">width</span>: <span class="number">200px</span>; &#125;</span><br><span class="line"><span class="selector-class">.item-3</span> &#123; <span class="attribute">width</span>: <span class="number">100px</span>; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、-each循环指令"><a href="#3、-each循环指令" class="headerlink" title="3、@each循环指令"></a>3、@each循环指令</h4><p>@each指令和其它两种指令不同的是，@each不是基于变量循环的，而是基于列表循环。</p>
<p>@each 循环指令的形式：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$var</span> in &lt;list&gt;</span><br></pre></td></tr></table></figure>
<p>上面的list就是一个列表</p>
<p>具体可看下面这个实例：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$list</span>: margin padding;</span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$item</span> in <span class="variable">$list</span> &#123;</span><br><span class="line">  <span class="selector-class">.item</span> &#123;</span><br><span class="line">    #&#123;<span class="variable">$item</span>&#125;: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>SASS</category>
      </categories>
  </entry>
  <entry>
    <title>SASS嵌套</title>
    <url>/sass-nested/</url>
    <content><![CDATA[<p>SASS中提供了三种嵌套方式：</p>
<ol>
<li>选择器嵌套</li>
<li>属性嵌套</li>
<li>伪类嵌套</li>
</ol>
<h4 id="1、选择器嵌套"><a href="#1、选择器嵌套" class="headerlink" title="1、选择器嵌套"></a>1、选择器嵌套</h4><p>我们平时用的最多的就是选择器嵌套了，比如：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="selector-tag">div</span> &amp; &#123;</span><br><span class="line">      <span class="attribute">color</span>: blue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的css样式代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、属性嵌套"><a href="#2、属性嵌套" class="headerlink" title="2、属性嵌套"></a>2、属性嵌套</h4><p>假如有下面一点css代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以使用属性嵌套来写成：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    size: <span class="number">20px</span>;</span><br><span class="line">    weight: bold;</span><br><span class="line">    style: italic;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="3、伪类嵌套"><a href="#3、伪类嵌套" class="headerlink" title="3、伪类嵌套"></a>3、伪类嵌套</h4><p>伪类嵌套也是开发中经常用的一种嵌套方式，比如下面这段css代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:before</span>, </span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以使用伪类嵌套来写成：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span>,</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>平时开发中，我们可以合理的应用上述三种嵌套方式，来简化代码书写，提高开发效率。</p>
]]></content>
      <categories>
        <category>SASS</category>
      </categories>
  </entry>
  <entry>
    <title>使用SASS简化媒体查询</title>
    <url>/sass-media/</url>
    <content><![CDATA[<p>我们平时开发时，会经常使用媒体查询来设置不同屏幕尺寸下的样式。于是就会下面的代码，不仅麻烦，而且不够直观，维护起来也很麻烦。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">320px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.class1</span> &#123;</span><br><span class="line">    <span class="comment">/* styles */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.class2</span> &#123;</span><br><span class="line">    <span class="comment">/* styles */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">481px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.class1</span> &#123;</span><br><span class="line">    <span class="comment">/* styles */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.class2</span> &#123;</span><br><span class="line">    <span class="comment">/* styles */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实我们可以使用SASS来简化媒体查询的写法。</p>
<p>首先我们需要定义一个变量，用于存储常用屏幕尺寸的范围。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义媒体查询对象，防止变量在其他地方使用，这里定义为私有变量($后面添加-或者_)</span></span><br><span class="line">$_breakpoints: (</span><br><span class="line">  <span class="string">&#x27;phone&#x27;</span>: (<span class="number">320px</span>, <span class="number">480px</span>), </span><br><span class="line">  <span class="string">&#x27;pad&#x27;</span>: (<span class="number">481px</span>, <span class="number">768px</span>),</span><br><span class="line">  <span class="string">&#x27;notebook&#x27;</span>: (<span class="number">769px</span>, <span class="number">1024px</span>),</span><br><span class="line">  <span class="string">&#x27;desktop&#x27;</span>: (<span class="number">1025px</span>, <span class="number">1200px</span>),</span><br><span class="line">  <span class="string">&#x27;tv&#x27;</span>: <span class="number">1201px</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>接下来，我们定义一个mixin，用于生成媒体查询代码。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> respond-to(<span class="variable">$breakname</span>) &#123;</span><br><span class="line">  <span class="comment">// 1、根据 $breakname 获取屏幕尺寸范围，这里可以使用 sass 中的 map-get 函数</span></span><br><span class="line">  <span class="variable">$bp</span>: <span class="built_in">map-get</span>($_breakpoints, <span class="variable">$breakname</span>);</span><br><span class="line">  <span class="comment">// 2、判断 $bp 的类型（从上面定义的变量可以看出，前四种为list类型，最后一种为非list），获取变量的类型可以使用 sass 中的 type-of 函数</span></span><br><span class="line">  <span class="keyword">@if</span> type-of(<span class="variable">$bp</span>) == <span class="string">&#x27;list&#x27;</span> &#123;</span><br><span class="line">    <span class="comment">// 3、获取 $bp 变量中的值，这里可以使用 sass 中的 nth 函数</span></span><br><span class="line">    <span class="variable">$min</span>: <span class="built_in">nth</span>(<span class="variable">$bp</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="variable">$max</span>: <span class="built_in">nth</span>(<span class="variable">$bp</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="comment">//  4、生成媒体查询代码</span></span><br><span class="line">    <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">$min</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="variable">$max</span>) &#123;</span><br><span class="line">      <span class="comment">// 5、在媒体查询代码中使用 @content 指令，将后面的代码插入到媒体查询代码中</span></span><br><span class="line">      <span class="keyword">@content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="comment">// 4、生成媒体查询代码（同上面的第四步），唯一的区别是这里的 $bp 不是list类型了，可以直接使用</span></span><br><span class="line">    <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">$bp</span>) &#123;</span><br><span class="line">      <span class="comment">// 5、在媒体查询代码中使用 @content 指令，将后面的代码插入到媒体查询代码中</span></span><br><span class="line">      <span class="keyword">@content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，我们的 mixin 已经定义好了，接下来我们就可以在需要使用媒体查询的地方使用它了，记住不要忘记导入对应的文件了。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class1</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> respond-to(<span class="string">&#x27;phone&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">/* styles */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@include</span> respond-to(<span class="string">&#x27;pad&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">/* styles */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class2</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> respond-to(<span class="string">&#x27;phone&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">/* styles */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@include</span> respond-to(<span class="string">&#x27;pad&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">/* styles */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假如后面，媒体查询的尺寸需要修改，只需要修改 $_breakpoints 变量就可以了。不需要在到处一个个修改，大大降低了维护成本。</p>
<p>并且使用这种方式，非常直观的可以看出对应 className 在不同尺寸下的样式。</p>
]]></content>
      <categories>
        <category>SASS</category>
      </categories>
  </entry>
</search>
