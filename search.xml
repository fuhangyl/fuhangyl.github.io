<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>对象数组去重</title>
    <url>/object-array-deduplication/</url>
    <content><![CDATA[<p>平时我们在做项目时，经常会遇到去重操作，那么当我们遇到一个对象数组时，如何去重呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;fuhang&#x27;</span>, <span class="attr">age</span>: <span class="number">23</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;fuhang&#x27;</span>, <span class="attr">age</span>: <span class="number">23</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hash = &#123;&#125;</span><br><span class="line"></span><br><span class="line">list = list.<span class="title function_">reduce</span>(<span class="function">(<span class="params">item, next</span>) =&gt;</span> &#123;</span><br><span class="line">  hash[next.<span class="property">name</span>] ? <span class="string">&#x27;&#x27;</span> : hash[next.<span class="property">name</span>] = <span class="literal">true</span> &amp;&amp; item.<span class="title function_">push</span>(next);</span><br><span class="line">  <span class="keyword">return</span> item;</span><br><span class="line">&#125;, [])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list)</span><br><span class="line"><span class="comment">// [ &#123; name: &#x27;fuhang&#x27;, age: 23 &#125;, &#123; name: &#x27;tom&#x27;, age: 18 &#125; ]</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<ol>
<li>reduce()方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。关于reduce的详细用法可参考MDN</li>
<li>主要利用了一个空的hash对象来判断，是否已经有同属性的对象，如果有则不执行任何操作，如果没有，则push到存储的对象中去。</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>map、parseInt组合考点</title>
    <url>/map-parseInt/</url>
    <content><![CDATA[<p>[‘1’, ‘2’, ‘3’].map(parseInt) what &amp; why ? 这题主要主要考了两个知识点：</p>
<h3 id="1-Array-map"><a href="#1-Array-map" class="headerlink" title="1. Array.map()"></a>1. Array.map()</h3><p>map方法会接受一个callback函数，callback 函数会被自动传入三个参数：</p>
<ul>
<li>currentValue：callback 数组中正在处理的当前元素</li>
<li>index(可选)：callback 数组中正在处理的当前元素的索引</li>
<li>thisArg(可选)：执行 callback 函数时使用的 this 值</li>
</ul>
<p>map方法最后返回一个经过callback计算后的数组，并且不会修改原数组。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map">参考：map | MDN</a></p>
<h3 id="2-parseInt"><a href="#2-parseInt" class="headerlink" title="2. parseInt()"></a>2. parseInt()</h3><p>parseInt方法接受两个参数：</p>
<ul>
<li>string：要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用  toString 抽象操作)。字符串开头的空白符将会被忽略。</li>
<li>radix：一个介于2和36之间的整数(数学系统的基础)，表示上述字符串的基数。比如参数”10”表示使用我们通常使用的十进制数值系统。不同的基数会产生不同的结果，当未指定基数或基数为0时，则数字将以 10 为基础来解析。</li>
</ul>
<p><strong>注意：</strong> radix参数为n 将会把第一个参数看作是一个数的n进制表示，而返回的值则是十进制的。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;123&#x27;</span>, <span class="number">5</span>) <span class="comment">// 将&#x27;123&#x27;看作5进制数，返回十进制数38 =&gt; 1*5^2 + 2*5^1 + 3*5^0 = 38</span></span><br></pre></td></tr></table></figure>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt">参考：parseInt | MDN</a></p>
<p>所以上题其实就是等价于：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;1&#x27;</span>, <span class="number">0</span>)   <span class="comment">// 1       基数为0时，已十进制解析</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;2&#x27;</span>, <span class="number">1</span>)   <span class="comment">// NaN     radi是介于2~36之间的数</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;3&#x27;</span>, <span class="number">2</span>)   <span class="comment">// NaN     2进制数中不会出现3</span></span><br></pre></td></tr></table></figure>
<p>还可以看看下面这一题：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[ <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;10&#x27;</span> ].<span class="title function_">map</span>(<span class="built_in">parseInt</span>)</span><br></pre></td></tr></table></figure>
<p>其实答案已经很明显了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>, <span class="number">0</span>)     <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>, <span class="number">1</span>)     <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>, <span class="number">2</span>)     <span class="comment">// 2         1*2^1 + 0*2^0</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>, <span class="number">3</span>)     <span class="comment">// 3         1*3^1 + 0*3^0</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>, <span class="number">4</span>)     <span class="comment">// 4         1*4^1 + 0*4^0</span></span><br></pre></td></tr></table></figure>
<p>有的时候我们还需要注意进制数的规则，比如下面的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;3&#x27;</span>, <span class="number">2</span>)   </span><br><span class="line"><span class="comment">// NaN   2进制数中是不允许出现大于等于2的数字的</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;5&#x27;</span>, <span class="number">4</span>)   </span><br><span class="line"><span class="comment">// NaN   4进制数中是不允许出现大于等于4的数字的</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;124&#x27;</span>, <span class="number">4</span>) </span><br><span class="line"><span class="comment">// 6  4进制数中不允许出现大于等于4的数字，所以&#x27;124&#x27;会被转换为&#x27;12&#x27;，然后&#x27;12&#x27;转换为四进制 1*4^1 + 2*4^0 = 6</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript、面试题</category>
      </categories>
  </entry>
</search>
